{
  "stats": {
    "suites": 4,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-25T16:11:08.471Z",
    "end": "2024-04-25T16:11:08.496Z",
    "duration": 25,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d8f32024-9d34-473d-a140-746eae618816",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "febcd225-0d92-4abe-bb18-44c3b8518c30",
          "title": "getEvenNumbersFromArray positive test",
          "fullFile": "D:\\EPAM\\practice\\js-unit-test-frameworks-task\\test\\numbers-validator\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\numbers-validator\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray positive test\"",
              "fullTitle": "getEvenNumbersFromArray positive test \"before each\" hook in \"getEvenNumbersFromArray positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "65bd4b8a-fe7d-41ca-af49-fe92978d2e89",
              "parentUUID": "febcd225-0d92-4abe-bb18-44c3b8518c30",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray positive test\"",
              "fullTitle": "getEvenNumbersFromArray positive test \"after each\" hook in \"getEvenNumbersFromArray positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "f8b59971-246f-430f-9042-b50d30323d2a",
              "parentUUID": "febcd225-0d92-4abe-bb18-44c3b8518c30",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers",
              "fullTitle": "getEvenNumbersFromArray positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbers).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "c37e0139-dc2f-4c0a-a591-a97302c68407",
              "parentUUID": "febcd225-0d92-4abe-bb18-44c3b8518c30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for non-array inputs",
              "fullTitle": "getEvenNumbersFromArray positive test should throw an error for non-array inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const notAnArray = 'not an array';\nexpect(\n    () => validator.getEvenNumbersFromArray(notAnArray)\n).to.throw();",
              "err": {},
              "uuid": "038fe69c-cce2-4e4a-a725-e9ca2c4c4d9e",
              "parentUUID": "febcd225-0d92-4abe-bb18-44c3b8518c30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for arrays with non-number elements",
              "fullTitle": "getEvenNumbersFromArray positive test should throw an error for arrays with non-number elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mixedArray = [1, \"2\", 3];\nexpect(\n    () => validator.getEvenNumbersFromArray(mixedArray)\n).to.throw('[1,2,3] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "2b834238-6308-460e-99e2-25d6ae8ca7eb",
              "parentUUID": "febcd225-0d92-4abe-bb18-44c3b8518c30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no even numbers are present",
              "fullTitle": "getEvenNumbersFromArray positive test should return an empty array if no even numbers are present",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const oddNumbers = [1, 3, 5];\nconst evenNumbers = validator.getEvenNumbersFromArray(oddNumbers);\nexpect(evenNumbers).to.deep.equal([]);",
              "err": {},
              "uuid": "16257b40-4c54-4792-a27f-5488c8b2ce3e",
              "parentUUID": "febcd225-0d92-4abe-bb18-44c3b8518c30",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty array input",
              "fullTitle": "getEvenNumbersFromArray positive test should handle an empty array input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyArray = [];\nconst evenNumbers = validator.getEvenNumbersFromArray(emptyArray);\nexpect(evenNumbers).to.deep.equal([]);",
              "err": {},
              "uuid": "d933e1b5-d072-4474-858e-6ec78c0fefee",
              "parentUUID": "febcd225-0d92-4abe-bb18-44c3b8518c30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c37e0139-dc2f-4c0a-a591-a97302c68407",
            "038fe69c-cce2-4e4a-a725-e9ca2c4c4d9e",
            "2b834238-6308-460e-99e2-25d6ae8ca7eb",
            "16257b40-4c54-4792-a27f-5488c8b2ce3e",
            "d933e1b5-d072-4474-858e-6ec78c0fefee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc3a3417-285f-4678-bad5-9ee2c79b5b6e",
          "title": "isAllNumbers positive tests",
          "fullFile": "D:\\EPAM\\practice\\js-unit-test-frameworks-task\\test\\numbers-validator\\isAllNumbers.spec.js",
          "file": "\\test\\numbers-validator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"before each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator;",
              "err": {},
              "uuid": "1bc82ca8-e356-4acb-a989-8423243c24c9",
              "parentUUID": "fc3a3417-285f-4678-bad5-9ee2c79b5b6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"after each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "885fac98-9918-46fb-b809-7da290ee591e",
              "parentUUID": "fc3a3417-285f-4678-bad5-9ee2c79b5b6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an array containing only numbers",
              "fullTitle": "isAllNumbers positive tests should return true when provided with an array containing only numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1, 2, 3, 4, 5];\nconst result = validator.isAllNumbers(arrayOfNumbers);\nexpect(result).to.be.equal(true);",
              "err": {},
              "uuid": "3f7e547f-6ebf-47c1-9538-7ef119b0436b",
              "parentUUID": "fc3a3417-285f-4678-bad5-9ee2c79b5b6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided with a string",
              "fullTitle": "isAllNumbers positive tests should throw an error when provided with a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n    validator.isAllNumbers('1')\n}).to.throw('[1] is not an array');",
              "err": {},
              "uuid": "2fa5b4ed-07a5-4800-ab0d-593d219ff86f",
              "parentUUID": "fc3a3417-285f-4678-bad5-9ee2c79b5b6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "isAllNumbers positive tests should return true for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = validator.isAllNumbers([]);\nexpect(result).to.be.equal(true);",
              "err": {},
              "uuid": "356b1539-6ef8-4a75-beda-365f14505a37",
              "parentUUID": "fc3a3417-285f-4678-bad5-9ee2c79b5b6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f7e547f-6ebf-47c1-9538-7ef119b0436b",
            "2fa5b4ed-07a5-4800-ab0d-593d219ff86f",
            "356b1539-6ef8-4a75-beda-365f14505a37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5941894c-4f9e-47d6-a26f-eccedf810a74",
          "title": "isInteger positive tests",
          "fullFile": "D:\\EPAM\\practice\\js-unit-test-frameworks-task\\test\\numbers-validator\\isInteger.spec.js",
          "file": "\\test\\numbers-validator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"before each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "ef11e3d3-2bc8-4561-926d-341e7eb3c33b",
              "parentUUID": "5941894c-4f9e-47d6-a26f-eccedf810a74",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"after each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "c91299b2-1587-4e03-b3be-4bddd3989b29",
              "parentUUID": "5941894c-4f9e-47d6-a26f-eccedf810a74",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an integer",
              "fullTitle": "isInteger positive tests should return true when provided with an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = validator.isInteger(1);\nexpect(result).to.be.equal(true);",
              "err": {},
              "uuid": "b87f328c-0926-45e0-a334-d1b3b9d8b2cf",
              "parentUUID": "5941894c-4f9e-47d6-a26f-eccedf810a74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided with a string",
              "fullTitle": "isInteger positive tests should throw an error when provided with a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n    validator.isInteger('1')\n}).to.throw(\"[1] is not a number\");",
              "err": {},
              "uuid": "0d3fb7df-7b21-404a-939f-58d063427647",
              "parentUUID": "5941894c-4f9e-47d6-a26f-eccedf810a74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when called without any arguments",
              "fullTitle": "isInteger positive tests should throw an error when called without any arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n    validator.isInteger()\n}).to.throw('[undefined] is not a number');",
              "err": {},
              "uuid": "e6092a9a-f10f-4b3f-8c01-32a722047537",
              "parentUUID": "5941894c-4f9e-47d6-a26f-eccedf810a74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b87f328c-0926-45e0-a334-d1b3b9d8b2cf",
            "0d3fb7df-7b21-404a-939f-58d063427647",
            "e6092a9a-f10f-4b3f-8c01-32a722047537"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "52799dc9-abcf-4200-8811-f34928156ca9",
          "title": "isNumberEven positive test",
          "fullFile": "D:\\EPAM\\practice\\js-unit-test-frameworks-task\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "d8c9425b-c2ac-44d4-9923-f11e640ee2e7",
              "parentUUID": "52799dc9-abcf-4200-8811-f34928156ca9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "e92f4100-5ba2-4beb-adac-38463980c41e",
              "parentUUID": "52799dc9-abcf-4200-8811-f34928156ca9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive test should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "0ca518c0-64a7-4a46-b444-752b2d2eb9dd",
              "parentUUID": "52799dc9-abcf-4200-8811-f34928156ca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided with an object",
              "fullTitle": "isNumberEven positive test should throw an error when provided with an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isNumberEven({})\n).to.throw('[[object Object]] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "ce37e47d-2c23-4f3f-af1a-1f86099e098d",
              "parentUUID": "52799dc9-abcf-4200-8811-f34928156ca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided with undefined",
              "fullTitle": "isNumberEven positive test should throw an error when provided with undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isNumberEven(undefined)\n).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "7b605602-e147-4603-8252-8603f6099ecd",
              "parentUUID": "52799dc9-abcf-4200-8811-f34928156ca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when called without any parameters",
              "fullTitle": "isNumberEven positive test should throw an error when called without any parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven()\n}).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "f94f6c96-f964-47f0-abb7-6e99a53d716e",
              "parentUUID": "52799dc9-abcf-4200-8811-f34928156ca9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive test should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "2a08bb74-9a2c-4f6c-b5ad-62ebd6ebacd0",
              "parentUUID": "52799dc9-abcf-4200-8811-f34928156ca9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ca518c0-64a7-4a46-b444-752b2d2eb9dd",
            "ce37e47d-2c23-4f3f-af1a-1f86099e098d",
            "7b605602-e147-4603-8252-8603f6099ecd",
            "f94f6c96-f964-47f0-abb7-6e99a53d716e",
            "2a08bb74-9a2c-4f6c-b5ad-62ebd6ebacd0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}