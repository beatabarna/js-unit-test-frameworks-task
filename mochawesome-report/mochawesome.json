{
  "stats": {
    "suites": 4,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-25T17:04:12.902Z",
    "end": "2024-04-25T17:04:12.921Z",
    "duration": 19,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b233eb69-a4fd-4952-b0eb-2753e7c330e4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e2e94cb-4c5a-485e-bbfb-08c38141999d",
          "title": "getEvenNumbersFromArray positive test",
          "fullFile": "D:\\EPAM\\practice\\js-unit-test-frameworks-task\\test\\numbers-validator\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\numbers-validator\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray positive test\"",
              "fullTitle": "getEvenNumbersFromArray positive test \"before each\" hook in \"getEvenNumbersFromArray positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "354dc8d7-5344-4fa1-b0c4-fb9298b49349",
              "parentUUID": "2e2e94cb-4c5a-485e-bbfb-08c38141999d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray positive test\"",
              "fullTitle": "getEvenNumbersFromArray positive test \"after each\" hook in \"getEvenNumbersFromArray positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "86abe835-5693-47cd-978f-f6987bf0f28e",
              "parentUUID": "2e2e94cb-4c5a-485e-bbfb-08c38141999d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers",
              "fullTitle": "getEvenNumbersFromArray positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1, 2, 3, 4, 5, 6];\nconst evenNumbers = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(evenNumbers).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "6d5355da-23c1-43f5-8083-611c8a1143f9",
              "parentUUID": "2e2e94cb-4c5a-485e-bbfb-08c38141999d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for non-array inputs",
              "fullTitle": "getEvenNumbersFromArray positive test should throw an error for non-array inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const notAnArray = 'not an array';\nexpect(\n    () => validator.getEvenNumbersFromArray(notAnArray),\n).to.throw();",
              "err": {},
              "uuid": "36c9400f-ff27-4f4b-bfac-5b949fd32661",
              "parentUUID": "2e2e94cb-4c5a-485e-bbfb-08c38141999d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error for arrays with non-number elements",
              "fullTitle": "getEvenNumbersFromArray positive test should throw an error for arrays with non-number elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mixedArray = [1, '2', 3];\nexpect(\n    () => validator.getEvenNumbersFromArray(mixedArray),\n).to.throw('[1,2,3] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "e93a1ba6-41bf-4bc6-ad43-ade150a61238",
              "parentUUID": "2e2e94cb-4c5a-485e-bbfb-08c38141999d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array if no even numbers are present",
              "fullTitle": "getEvenNumbersFromArray positive test should return an empty array if no even numbers are present",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const oddNumbers = [1, 3, 5];\nconst evenNumbers = validator.getEvenNumbersFromArray(oddNumbers);\nexpect(evenNumbers).to.deep.equal([]);",
              "err": {},
              "uuid": "24187cf8-a6bb-4c49-a7ab-ae21e7364134",
              "parentUUID": "2e2e94cb-4c5a-485e-bbfb-08c38141999d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle an empty array input",
              "fullTitle": "getEvenNumbersFromArray positive test should handle an empty array input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyArray = [];\nconst evenNumbers = validator.getEvenNumbersFromArray(emptyArray);\nexpect(evenNumbers).to.deep.equal([]);",
              "err": {},
              "uuid": "3e603266-e394-47de-9a12-608f399cf32f",
              "parentUUID": "2e2e94cb-4c5a-485e-bbfb-08c38141999d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d5355da-23c1-43f5-8083-611c8a1143f9",
            "36c9400f-ff27-4f4b-bfac-5b949fd32661",
            "e93a1ba6-41bf-4bc6-ad43-ade150a61238",
            "24187cf8-a6bb-4c49-a7ab-ae21e7364134",
            "3e603266-e394-47de-9a12-608f399cf32f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a67a5eaa-5061-44aa-ad27-598e098a7cb9",
          "title": "isAllNumbers positive tests",
          "fullFile": "D:\\EPAM\\practice\\js-unit-test-frameworks-task\\test\\numbers-validator\\isAllNumbers.spec.js",
          "file": "\\test\\numbers-validator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"before each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator;",
              "err": {},
              "uuid": "0e6112c2-c176-4139-b34a-4af2974cd0a7",
              "parentUUID": "a67a5eaa-5061-44aa-ad27-598e098a7cb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"after each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "308138db-83b0-4a46-ab80-32d3496e9b08",
              "parentUUID": "a67a5eaa-5061-44aa-ad27-598e098a7cb9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when the givven array contains only numbers",
              "fullTitle": "isAllNumbers positive tests should return true when the givven array contains only numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [1, 2, 3, 4, 5];\nconst result = validator.isAllNumbers(arrayOfNumbers);\nexpect(result).to.be.equal(true);",
              "err": {},
              "uuid": "fa67008b-433c-4e42-ace8-5c5681de8172",
              "parentUUID": "a67a5eaa-5061-44aa-ad27-598e098a7cb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided with a string",
              "fullTitle": "isAllNumbers positive tests should throw an error when provided with a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers('1');\n}).to.throw('[1] is not an array');",
              "err": {},
              "uuid": "3c68e1a3-81fa-494e-9c89-81d0e9b593e7",
              "parentUUID": "a67a5eaa-5061-44aa-ad27-598e098a7cb9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for an empty array",
              "fullTitle": "isAllNumbers positive tests should return true for an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = validator.isAllNumbers([]);\nexpect(result).to.be.equal(true);",
              "err": {},
              "uuid": "55b53ec9-1978-422c-ae39-0fd4464f72b2",
              "parentUUID": "a67a5eaa-5061-44aa-ad27-598e098a7cb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa67008b-433c-4e42-ace8-5c5681de8172",
            "3c68e1a3-81fa-494e-9c89-81d0e9b593e7",
            "55b53ec9-1978-422c-ae39-0fd4464f72b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "82ecd017-45e7-4477-bcdd-1b91cf7ca8a3",
          "title": "isInteger positive tests",
          "fullFile": "D:\\EPAM\\practice\\js-unit-test-frameworks-task\\test\\numbers-validator\\isInteger.spec.js",
          "file": "\\test\\numbers-validator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"before each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "5cda3a34-15d1-4d8c-b8dd-97706da484af",
              "parentUUID": "82ecd017-45e7-4477-bcdd-1b91cf7ca8a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"after each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "4d4e33a6-9101-49ea-ac1b-35b1ce6b877b",
              "parentUUID": "82ecd017-45e7-4477-bcdd-1b91cf7ca8a3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an integer",
              "fullTitle": "isInteger positive tests should return true when provided with an integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = validator.isInteger(1);\nexpect(result).to.be.equal(true);",
              "err": {},
              "uuid": "7f873644-cfc8-4f1d-9a10-48c1cd13b6dd",
              "parentUUID": "82ecd017-45e7-4477-bcdd-1b91cf7ca8a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided with a string",
              "fullTitle": "isInteger positive tests should throw an error when provided with a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('1');\n}).to.throw('[1] is not a number');",
              "err": {},
              "uuid": "4095c396-6967-4361-90b3-e648349c12bb",
              "parentUUID": "82ecd017-45e7-4477-bcdd-1b91cf7ca8a3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when called without any arguments",
              "fullTitle": "isInteger positive tests should throw an error when called without any arguments",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger();\n}).to.throw('[undefined] is not a number');",
              "err": {},
              "uuid": "b1961dae-c705-464b-83ab-9d19e04625ea",
              "parentUUID": "82ecd017-45e7-4477-bcdd-1b91cf7ca8a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f873644-cfc8-4f1d-9a10-48c1cd13b6dd",
            "4095c396-6967-4361-90b3-e648349c12bb",
            "b1961dae-c705-464b-83ab-9d19e04625ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8b8d2400-4407-4691-8cfb-e525653aa5ff",
          "title": "isNumberEven positive test",
          "fullFile": "D:\\EPAM\\practice\\js-unit-test-frameworks-task\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "d0dd8124-9c8d-4567-8ecc-2a51fd6035ac",
              "parentUUID": "8b8d2400-4407-4691-8cfb-e525653aa5ff",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "7240ca23-b732-48ca-ac76-4aea276a8a36",
              "parentUUID": "8b8d2400-4407-4691-8cfb-e525653aa5ff",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive test should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "9448711b-28b2-4216-bff0-1fed9f865239",
              "parentUUID": "8b8d2400-4407-4691-8cfb-e525653aa5ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided with an object",
              "fullTitle": "isNumberEven positive test should throw an error when provided with an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isNumberEven({}),\n).to.throw(\n    '[[object Object]] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "8cb65009-190d-4d88-b8a4-43a5f2229d27",
              "parentUUID": "8b8d2400-4407-4691-8cfb-e525653aa5ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided with undefined",
              "fullTitle": "isNumberEven positive test should throw an error when provided with undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isNumberEven(undefined),\n).to.throw('[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "500fd6db-fa67-4fa9-bfb7-322dc066693f",
              "parentUUID": "8b8d2400-4407-4691-8cfb-e525653aa5ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when called without any parameters",
              "fullTitle": "isNumberEven positive test should throw an error when called without any parameters",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven();\n}).to.throw(\n    '[undefined] is not of type \"Number\" it is of type \"undefined\"');",
              "err": {},
              "uuid": "104be4b9-4383-42a0-b018-a6739f5fbbd8",
              "parentUUID": "8b8d2400-4407-4691-8cfb-e525653aa5ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive test should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw(\n    '[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "e671bead-ae7b-4bdb-ab9f-2cebbe449166",
              "parentUUID": "8b8d2400-4407-4691-8cfb-e525653aa5ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9448711b-28b2-4216-bff0-1fed9f865239",
            "8cb65009-190d-4d88-b8a4-43a5f2229d27",
            "500fd6db-fa67-4fa9-bfb7-322dc066693f",
            "104be4b9-4383-42a0-b018-a6739f5fbbd8",
            "e671bead-ae7b-4bdb-ab9f-2cebbe449166"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}